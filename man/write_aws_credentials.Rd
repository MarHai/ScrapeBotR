% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_credentials.R
\name{write_aws_credentials}
\alias{write_aws_credentials}
\title{Write AWS credentials to INI file}
\usage{
write_aws_credentials(
  access_key_id,
  secret_access_key,
  ssh_private_pem_file,
  ssh_public_pem_file
)
}
\arguments{
\item{access_key_id}{The AWS user's access key ID (via IAM) as character string.}

\item{secret_access_key}{The corresponding secret as character string.}

\item{ssh_private_pem_file}{The path/file to your private SSH key in .pem format as character string.}

\item{ssh_public_pem_file}{The path/file to the corresponding public SSH key in .pem format as character string.}
}
\value{
The file name of the newly created credentials file, if successful.
}
\description{
If you want to orchestrate ScrapeBot on AWS (Amazon Web Services), you need an AWS account.
This AWS account then needs an IAM access (via http://console.aws.amazon.com/iam) with an API access key.
In addition, launched servers on AWS will be fed your SSH public key to access them.
To create a SSH keypair, use the AWS EC2 console (https://console.aws.amazon.com/ec2/) and "Network & Society."
}
\details{
That said, you should not use connection functionality by regularly publishing credentials in the console. While credentials will end up in the console log, you also risk pushing scripts including credentials to any sustainable repositories (e.g., Git).
Instead, you should prepare an INI file which will then be read/used by the connection functionality.

This function is a helper function to create this INI file for you.
While creating the INI file like so will still end up pushing your credentials to the console log once,
but it will not require you to do that ever again, thus keeping credentials off your repositories.
The function pushes the credentials into an INI-file section called "AWS".

Alternatively, you can absolutely create this INI file yourself. For this, include a file called \code{.scrapebot.ini} (yes, including the leading dot) in your working directory.
This file then needs a section which is indicated in its own line, looking like \code{[my section]}.
Below this line (and thus, within this section) you can specify the following parameters to log into your AWS:
\itemize{
\item access_key_id (for example, \code{access_key_id=ABCD0EF1GH2IJ3KL})
\item secret_access_key (for example, \code{secret_access_key=fkdusbl+sli725imfn26fks9})
\item ssh_private_pem_file (for example, \code{my_aws_key_private.pem})
\item ssh_public_pem_file (for example, \code{my_aws_key_public.pem})
}
}
\examples{
\dontrun{

write_aws_credentials(
  'ABCD0EF1GH2IJ3KL',
  'fkdusbl+sli725imfn26fks9',
  'my_aws_key_private.pem',
  'my_aws_key_public.pem'
)
}

}
\seealso{
\code{\link[=aws_launch_instance]{aws_launch_instance()}} to use the credential file in practice
}
